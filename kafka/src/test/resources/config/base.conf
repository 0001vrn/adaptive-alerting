kstream.app.default {
  streams {
    bootstrap.servers = "kafkasvc:9092"
    default.key.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"
    default.value.serde = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricTankSerde"
  }
  health.status.path = "/app/isHealthy"
}

metric-router {
  streams {
    auto.offset.reset = "earliest"
    cache.max.bytes.buffering = "0"
    commit.interval.ms = "300"
    state.dir = "/tmp/kafka-streams"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointDeserializer"
  }
  topic = "metrics"
  health.status.path = "/tmp/isAlive"
}

constant-detector {
  streams {
    auto.offset.reset = "earliest"
    cache.max.bytes.buffering = "0"
    commit.interval.ms = "300"
    state.dir = "/tmp/kafka-streams"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointDeserializer"
  }
  topic = "constant-metrics"
  health.status.path = "/tmp/isAlive"
}

ewma-detector {
  streams {
    application.id = "ewma-detector"
  }
  topic = "ewma-metrics"
}

pewma-detector {
  streams {
    application.id = "pewma-detector"
  }
  topic = "pewma-metrics"
}



//Configs for kafka topic consumers - used to verify data in the topic

anomalies-consumer {
  streams {
    auto.offset.reset = "earliest"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.adaptivealerting.kafka.serde.JsonPojoDeserializer"
    JsonPojoClass = "com.expedia.adaptivealerting.core.anomaly.AnomalyResult"
  }
  topic = "metrics"
  health.status.path = "/tmp/isAlive"
}

constant-detector-consumer {
  streams {
    auto.offset.reset = "earliest"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointDeserializer"
  }
  topic = "constant-metrics"
  health.status.path = "/tmp/isAlive"
}

//Configs for producers to kafka topic - used to send test data to topics

producer {
  streams {
    acks = "all"
    retries = "0"
    key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
    value.serializer = "com.expedia.www.haystack.commons.kstreams.serde.metricpoint.MetricPointSerializer"
  }
  topic = "constant-metrics"
  health.status.path = "/tmp/isAlive"
}
